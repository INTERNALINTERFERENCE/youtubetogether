@page "/room/{roomName}"

@using Microsoft.AspNetCore.SignalR.Client
@using System.Threading;
@using System.Net.Http;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@implements IDisposable

<div class="content">
    <div class="content-box">
        <div class="content-box-left">
            <div class="content-box-left-header">YT.</div>
            <nav>
                <a href="/">Home</a>
            </nav>
            <menu>
                
            </menu>
        </div>

        <div class="content-box-center">
            <div class="content-box-center-header">

                <input id="newVideo" placeholder="Search..." type="text" class="validate" @bind="currentUrl" @onkeypress="Send" name="action" disabled="@(!IsConnected)">

                <div class="content-box-center-monitor">
                    <span>CODE:</span>
                    <span>@roomName</span>
                </div>
            </div>


            <div class="content-box-center-iframe">
                <div id="ytplayer"></div>
            </div>


            <div class="content-box-center-title">@NewVideoErrorText</div>
            <div class="content-box-center-slider">
                <div class="content-box-center-slider-block">

                    @foreach (var member in Members)
                    {
                        if ((member == hubConnection.ConnectionId || member == Username) && (member == Leader || member == LeaderUsername))
                        {
                            <p>Leader: @member (you)</p> }
                        else if (member == Leader || member == LeaderUsername)
                        {
                            <p>Leader: @member</p> }
                        else if (member == hubConnection.ConnectionId || member == Username)
                        {
                            <p>@member (you)</p> }
                        else
                        {
                            <p>@member</p>}
                    }

                </div>
            </div>
            <div class="content-box-center-info">

                @* TODO: VIDEO INFO PLAYLIST *@
                <div class="playlist">
                    <ul>
                        @foreach (var id in playlist)
                        {
                            if(currentId == id)
                            {
                                <li>
                                    <span>@videoTitles.GetValueOrDefault(id)</span>
                                    <button @onclick="() => DeleteVideo(id)">Delete</button>
                                </li>
                            }
                            else
                            {
                                <li>
                                    <span @onclick="() => SwitchVideo(id)">@videoTitles.GetValueOrDefault(id)</span>
                                    <button @onclick="() => DeleteVideo(id)">Delete</button>
                                </li>
                            }
                        }                                        
                    </ul>
                </div>

            </div>
            <div style="clear:both;"></div>
        </div>

        @* CHAT *@
        <div class="content-box-right">
            <div class="content-box-right-header">
                <input id="newName" placeholder="Your name:" type="text" class="validate" @bind="NewUsername" @onkeypress="SetUsername" />
            </div>
            <div class="content-box-right-chat">
                <div style="overflow: auto; height: 100%; padding-right: 10px;">
                    @foreach (var item in messages)
                    {
                        if (item.Item1 == Username)
                        {
                            <div class="chat-item-dispatch">
                                <span class="chat-item-dispatch-avatar">@GetInitials(item.Item1)</span>
                                <div class="chat-item-content">
                                    <span class="chat-item-title"></span>
                                    <p class="chat-item-p">@item.Item2</p>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="chat-item-received">
                                <span class="chat-item-received-avatar">@GetInitials(item.Item1)</span>
                                <div class="chat-item-content">
                                    <span class="chat-item-title"></span>
                                    <p class="chat-item-p">@item.Item2</p>
                                </div>
                            </div>
                        }
                    }
                </div>

                <div id="chat-form">
                    <input @bind="messageInput" name="chat-form-message" placeholder="Quick Message..." type="text" />
                    <label for="chat-form-submit">
                        <button id="chat-form-submit" @onclick="SendMessage" disabled="@(!IsConnected)" />
                    </label>
                </div>
            </div>
        </div>
    </div>

        <div style="clear:both;"></div>
</div>
<div class="background">
    <div class="background-left"></div>
    <div class="background-right"></div>
</div>

@code{ [Parameter]
    public string roomName { get; set; }

    private HubConnection hubConnection;
    private bool updating = false;
    private int currentTimestamp;
    private string currentUrl;
    private string currentId;
    private bool isPaused = true;
    private int currentState;
    private static Action jsSync;
    private static Action jsNextVideo;
    private IList<string> playlist = new List<string>();
    private static readonly HttpClient client = new HttpClient() { BaseAddress = new Uri("https://localhost:44356/api/") };
    private Dictionary<string, string> videoTitles = new Dictionary<string, string>();
    private Dictionary<string, string> videoThumbs = new Dictionary<string, string>();
    public string Leader = string.Empty;
    public string LeaderUsername = string.Empty;
    public List<string> Members = new List<string>();
    public string Username = "Anonymous";
    public string NewUsername = string.Empty;
    public string UsernameErrorText = string.Empty;
    public string NewVideoErrorText = string.Empty;

    private List<(string, string)> messages = new List<(string, string)>();
    private string messageInput;

    private enum playerStates
    {
        Unstarted = -1,
        Ended = 0,
        Playing = 1,
        Paused = 2,
        Buffering = 3,
        VideoCued = 5
    }

    protected async override Task OnInitializedAsync()
    {
        jsSync = JsSync;
        jsNextVideo = JsNextVideo;
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/syncHub?room={roomName}"))
            .Build();

        hubConnection.On<string, int>("ReceiveNewVideo", async (id, timestamp) =>
        {
            Console.WriteLine("New video received: " + id + " Current ID: " + currentId + " Timestamp: " + timestamp);
            if (string.IsNullOrEmpty(currentId))
            {
                currentId = id;
                Console.WriteLine("Create player");
                playlist = playlist.Append(id).ToList();
                await JSRuntime.InvokeVoidAsync("onYouTubeIframeAPIReady", id, timestamp);
                GetTitle(id);
                GetThumbnailUrl(id);
                StateHasChanged();
            }
            else if (currentId != id)
            {
                Console.WriteLine("Adding video to playlist with ID: " + id);
                playlist = playlist.Append(id).ToList();
                var currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                if (currentState == (int)playerStates.Ended)
                {
                    Console.WriteLine("Playlist is done playing, moving to the newly added video.");
                    JsNextVideo();
                }
                GetTitle(id);
                GetThumbnailUrl(id);
                StateHasChanged();
            }
        });

        hubConnection.On<string, int, int>("ReceiveSync", async (id, timestamp, playlistSize) =>
        {
            Console.WriteLine("Received update " + id + " : " + timestamp.ToString());
            Console.WriteLine("Current ID: " + currentId + " Current Timestamp: " + currentTimestamp.ToString());
            if (playlist.Count != playlistSize)
            {
                Console.WriteLine("Requesting playlists to be synced");
                await hubConnection.SendAsync("PlaylistRequest", roomName);
            }
            if (currentId != id)
            {
                currentId = id;
                Console.WriteLine("Load new video: " + currentId);
                await JSRuntime.InvokeVoidAsync("player.loadVideoById", id);
                Console.WriteLine("Seeking to " + timestamp.ToString());
                await JSRuntime.InvokeVoidAsync("player.seekTo", timestamp);
                currentTimestamp = timestamp;
                Console.WriteLine("Announcing state change");
                StateHasChanged();

            }
            this.currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
            if (Math.Abs(currentTimestamp - timestamp) > 2)
            {
                Console.WriteLine("Seeking from " + currentTimestamp.ToString() + " to " + timestamp.ToString());
                await JSRuntime.InvokeVoidAsync("player.seekTo", timestamp);
                this.currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
            }
        });

        hubConnection.On<bool, int>("ReceivePauseStatus", async (pauseStatus, timestamp) =>
        {
            isPaused = (int)playerStates.Paused == currentState;
            Console.WriteLine("Received Pause Status - isPaused: "
                + pauseStatus.ToString()
                + " Timestamp: " + timestamp.ToString()
                + " CurrentState: " + currentState
                + " isPaused: " + isPaused);
            if (isPaused != pauseStatus)
            {
                currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                if (currentState != (int)playerStates.Playing)
                {
                    Console.WriteLine("Resuming video");
                    await JSRuntime.InvokeVoidAsync("player.playVideo");
                    currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                    isPaused = false;
                }
                else
                {
                    Console.WriteLine("Pausing video");
                    await JSRuntime.InvokeVoidAsync("player.pauseVideo");
                    await JSRuntime.InvokeVoidAsync("player.seekTo", timestamp);
                    currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
                    isPaused = true;
                }
            }
        });

        hubConnection.On<List<string>, string, int>("ReceivePlaylist", async (playlist, videoId, timestamp) =>
        {
            Console.WriteLine("Receiving playlist data: " + string.Join(", ", playlist));
            Console.WriteLine("Playlist's current video: " + videoId + " and timestamp: " + timestamp.ToString());
            if (!this.playlist.SequenceEqual(playlist))
            {
                this.playlist = playlist;
                foreach (var id in playlist)
                {
                    try
                    {
                        Console.WriteLine("Adding video title and thumbnail for ID: " + id);
                        GetTitle(id);
                        GetThumbnailUrl(id);
                    }
                    catch (System.ArgumentException)
                    {
                        Console.WriteLine("Title/Thumbnail were already in their respective lists");
                    }

                }
                currentId = videoId;
                currentTimestamp = timestamp;
                Console.WriteLine("Received playlist, loading video " + videoId);
                await JSRuntime.InvokeVoidAsync("onYouTubeIframeAPIReady", videoId, timestamp);
                StateHasChanged();

            }
        });

        hubConnection.On("PlaylistRequest", async () =>
        {
            Console.WriteLine("Another Client Requested Playlist Sync");
            if (playlist.Count > 0)
            {
                Console.WriteLine("Sending playlist");
                currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
                await hubConnection.SendAsync("SendPlaylist", roomName, playlist, currentId, currentTimestamp);
            }
        });

        hubConnection.On<string>("Leader", (name) =>
        {
            Leader = name;
            if (Username.Equals(Leader) && !updating)
            {
                StartUpdating();
            }
            StateHasChanged();
        });
        hubConnection.On<List<string>>("Members", (members) =>
        {
            Members = members;
            StateHasChanged();
        });
        hubConnection.On<string, string>("ReceiveMessage", (username, message) =>
        {
            var encodedMsg = $"{message}";
            messages.Add((username, encodedMsg));
            StateHasChanged();
        });

        await hubConnection.StartAsync();
        Username = $"{Username}_{hubConnection.ConnectionId.Substring(hubConnection.ConnectionId.Length - 4)}";
    }

    async Task SendMessage()
    {
        await hubConnection.SendAsync("SendMessage", Username, messageInput);
        messageInput = String.Empty;
    }

    void StartUpdating()
    {
        var autoEvent = new AutoResetEvent(false);
        var stateTimer = new Timer(CheckStatus,
           autoEvent, 3000, 2000);
    }


    public async void CheckStatus(Object stateInfo)
    {
        AutoResetEvent autoEvent = (AutoResetEvent)stateInfo;
        await Update();
    }

    public async Task Update()
    {
        Console.WriteLine("---Regular Update---");
        try
        {
            currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
            Console.WriteLine("current time: " + currentTimestamp.ToString());
            await hubConnection.SendAsync("SyncVideo", roomName, currentId, currentTimestamp, playlist.Count);
        }
        catch (JSException)
        {
            Console.WriteLine("Could not fetch timestamp");
        }

        Console.WriteLine("Checking pause status");
        try
        {
            currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
            if (currentState != (int)playerStates.Unstarted && currentState != (int)playerStates.VideoCued)
            {
                isPaused = (int)playerStates.Paused == currentState;
            }
            else
            {
                isPaused = true;
            }
            Console.WriteLine("Is paused: " + isPaused.ToString());
            await hubConnection.SendAsync("PauseStatus", roomName, isPaused, this.currentTimestamp);
        }
        catch (JSException)
        {
            Console.WriteLine("Could not get current state");
        }
        Console.WriteLine("---End Update---");
    }

    async Task Send()
    {
        if (!IsValidUrl(currentUrl))
        {
            NewVideoErrorText = "Please enter a valid URL";
            return;
        }
        NewVideoErrorText = string.Empty;

        int timestamp = 0;
        if (ContainsTimestamp(currentUrl))
        {
            Console.WriteLine("has timestamp");
            timestamp = GetUrlTimestamp(currentUrl);
            Console.WriteLine(timestamp.ToString());
        }
        var newId = GetId(currentUrl);
        Console.WriteLine("new id " + newId);
        currentUrl = string.Empty;
        StateHasChanged();
        Console.WriteLine("Sending " + newId);
        if (!updating && hubConnection.ConnectionId.Equals(Leader))
        {
            Console.WriteLine("We are the leader, starting to update");
            StartUpdating();
            updating = true;
        }
        await hubConnection.SendAsync("NewVideo", roomName, newId, timestamp);
    }

    [JSInvokable("jsSync")]
    public static void CallJsSync()
    {
        jsSync.Invoke();
    }

    public async void JsSync()
    {
        currentTimestamp = await JSRuntime.InvokeAsync<int>("getTimestamp");
        Console.WriteLine("new current timestamp: " + currentTimestamp.ToString());
        currentState = await JSRuntime.InvokeAsync<int>("player.getPlayerState");
        if (currentState != (int)playerStates.Unstarted && currentState != (int)playerStates.VideoCued)
        {
            isPaused = (int)playerStates.Paused == currentState;
        }
        else
        {
            isPaused = true;
        }

        if (!hubConnection.ConnectionId.Equals(Leader))
        {
            return;
        }

        if (!updating)
        {
            StartUpdating();
            updating = true;
        }
        await hubConnection.SendAsync("SyncVideo", roomName, currentId, this.currentTimestamp, playlist.Count);
        await hubConnection.SendAsync("PauseStatus", roomName, isPaused, this.currentTimestamp);
    }

    [JSInvokable("jsNextVideo")]
    public static void CallJsNextVideo()
    {
        jsNextVideo.Invoke();
    }

    public void JsNextVideo()
    {
        var index = playlist.IndexOf(currentId);
        if (index < playlist.Count - 1)
        {
            SwitchVideo(playlist[index + 1]);
        }
    }

    public bool IsValidUrl(string Url)
    {
        return Url.Contains("https://www.youtube.com") || Url.Contains("https://youtu.be") || Url.Contains("https://youtube.com");
    }

    public string GetId(string Url)
    {
        string id;
        if (Url.Contains("?v="))
        {
            id = Url.Split("=")[1].Split("&t")[0];
            Console.WriteLine("if: " + id);
        }
        else
        {
            id = Url.Replace("https://", "").Split("/")[1].Split("&t=")[0];
            Console.WriteLine("else: " + id);
        }
        return id;
    }

    public int GetUrlTimestamp(string Url)
    {
        return int.Parse(Url.Split("=")[2].TrimEnd('s'));
    }

    public bool ContainsTimestamp(string Url)
    {
        if (Url.Contains("&t="))
        {
            return true;
        }
        return false;
    }

    public async void DeleteVideo(string id)
    {

        var index = playlist.IndexOf(id);
        if (index < playlist.Count - 1 && id == currentId)
        {
            currentId = playlist[index + 1];
            SwitchVideo(currentId);
        }
        playlist.Remove(id);
        await hubConnection.SendAsync("SendPlaylist", roomName, playlist, currentId, currentTimestamp);
        StateHasChanged();
    }

    public async void SwitchVideo(string id)
    {
        Console.WriteLine("Switching video to ID: " + id);
        await hubConnection.SendAsync("SyncVideo", roomName, id, 0, playlist.Count);
        await JSRuntime.InvokeVoidAsync("player.loadVideoById", id);
        currentId = id;
        StateHasChanged();
    }

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    public async void GetTitle(string videoId)
    {
        HttpResponseMessage response = await Http.GetAsync("api/youtube/GetTitle/" + videoId);
        var responseBody = await response.Content.ReadAsStringAsync();
        try
        {
            videoTitles.Add(videoId, responseBody);
            StateHasChanged();
        }
        catch (System.ArgumentException)
        {
            Console.WriteLine("Video title is already in videoTitles");
        }

    }

    public async void GetThumbnailUrl(string videoId)
    {

        HttpResponseMessage response = await Http.GetAsync("api/youtube/GetThumbnails/" + videoId);
        var responseBody = await response.Content.ReadAsStringAsync();
        try
        {
            videoThumbs.Add(videoId, responseBody);
            StateHasChanged();
        }
        catch (System.ArgumentException)
        {
            Console.WriteLine("Video thumbnail is already in videoThumbs");
        }
    }

    public async void SetUsername()
    {
        if (string.IsNullOrEmpty(NewUsername))
        {
            UsernameErrorText = "Please enter a non-empty username...";
            return;
        }

        if (Members.Contains(NewUsername))
        {
            UsernameErrorText = "Please choose a username that isn't taken";
            NewUsername = string.Empty;
        }
        else
        {
            await hubConnection.SendAsync("SetUsername", roomName, NewUsername);
            Username = NewUsername;
            NewUsername = string.Empty;
            UsernameErrorText = string.Empty;
        }
        StateHasChanged();
    }
    public string GetInitials(string name)
    {
        if (name.DefaultIfEmpty() != default && name.Length > 2)
        {
            var upper = name.ToUpper();
            return $"{upper[0]}{upper[1]}";
        }
        return "";
    }
} 